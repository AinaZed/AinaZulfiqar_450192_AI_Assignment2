#include <bits/stdc++.h>
using namespace std;

#define N 3

struct Node {
    Node* parent;
    int mat[N][N];
    int x, y;
    int cost;
};

int printMatrix(int mat[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%d ", mat[i][j]);
        printf("\n");
    }
    return 0;
}

Node* newNode(int mat[N][N], int x, int y, int newX, int newY, Node* parent) {
    Node* node = new Node;
    node->parent = parent;
    memcpy(node->mat, mat, sizeof node->mat);
    swap(node->mat[x][y], node->mat[newX][newY]);
    node->cost = INT_MAX;
    node->x = newX;
    node->y = newY;
    return node;
}

int calculateCost(int mat[N][N], int final[N][N]) {
    int cost = 0;
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            if (mat[i][j] && mat[i][j] != final[i][j]) {
                cost++;
            }
    return cost;
}

bool isSolvable(int mat[N][N]) {
    int inv_count = 0;
    vector<int> arr;
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            arr.push_back(mat[i][j]);

    for (int i = 0; i < N * N - 1; i++) {
        for (int j = i + 1; j < N * N; j++) {
            if (arr[j] && arr[i] && arr[i] > arr[j])
                inv_count++;
        }
    }

    return (inv_count % 2 == 0);
}

int isSafe(int x, int y) {
    return (x >= 0 && x < N && y >= 0 && y < N);
}

void printPath(Node* root) {
    if (root == NULL)
        return;
    printPath(root->parent);
    printMatrix(root->mat);
    printf("\n");
}

struct comp {
    bool operator()(const Node* lhs, const Node* rhs) const {
        return lhs->cost > rhs->cost;
    }
};

int row[] = { 1, 0, -1, 0 };
int col[] = { 0, -1, 0, 1 };

void solve(int initial[N][N], int x, int y, int final[N][N]) {
    if (!isSolvable(initial)) {
        printf("The puzzle is not solvable.\n");
        return;
    }

    printf("Starting Greedy Search with Misplaced Tiles Heuristics...\n");

    priority_queue<Node*, std::vector<Node*>, comp> pq;

    Node* root = newNode(initial, x, y, x, y, NULL);
    root->cost = calculateCost(initial, final);
    pq.push(root);

    while (!pq.empty()) {
        Node* min = pq.top();
        pq.pop();

        printf("Exploring Node: %d\n", min->cost);
        printMatrix(min->mat);
        printf("\n");

        if (min->cost == 0) {
            printf("Solution Found:\n");
            printPath(min);
            return;
        }

        for (int i = 0; i < 4; i++) {
            if (isSafe(min->x + row[i], min->y + col[i])) {
                Node* child = newNode(min->mat, min->x, min->y, min->x + row[i], min->y + col[i], min);
                child->cost = calculateCost(child->mat, final);
                pq.push(child);
            }
        }
    }

    printf("No solution found.\n");
}

int main() {
    int initial[N][N] = {
        {8, 0, 6},
        {5, 4, 7},
        {2, 3, 1}
    };

    int final[N][N] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 0}
    };

    int x = 0, y = 1;

    solve(initial, x, y, final);

    return 0;
}
